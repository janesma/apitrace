syntax = "proto2";
package ApiTrace;

enum RenderTargetType {
  HIGHLIGHT_RENDER = 0;
  NORMAL_RENDER = 1;
  GEOMETRY_RENDER = 2;
  OVERDRAW_RENDER = 3;
}

enum RequestType {
  OPEN_FILE_REQUEST = 1;
  RENDER_TARGET_REQUEST = 2;
  SHADER_ASSEMBLY_REQUEST = 3;
  METRICS_REQUEST = 4;
  ALL_METRICS_REQUEST = 5;
  REPLACE_SHADERS_REQUEST = 6;
  API_REQUEST = 7;
  BATCH_REQUEST = 8;
  DISABLE_REQUEST = 9;
  SIMPLE_SHADER_REQUEST = 10;
  SCISSOR_REQUEST = 11;
  UNIFORM_REQUEST = 12;
  SET_UNIFORM_REQUEST = 13;
  STATE_REQUEST = 14;
  SET_STATE_REQUEST = 15;
  REVERT_EXPERIMENTS_REQUEST = 16;
  WIREFRAME_REQUEST = 17;
  TEXTURE_2X2_REQUEST = 18;
  TEXTURE_REQUEST = 19;
};

message OpenFileRequest {
  required string fileName = 1;
  required bytes md5Sum = 2;
  required uint32 fileSize = 3;
  required uint32 frameNumber = 4;
  required uint32 frameCount = 5;
};

message OpenFileStatus {
  required bool needs_upload = 1;
  required bool finished = 2;
  required uint32 frame_count = 3;
}

message MetricsList {
  repeated uint64 metric_ids = 1;
  repeated string metric_names = 2;
  repeated string metric_descriptions = 3;
}

message RenderTargetRequest {
  required uint32 experiment_count = 4;
  required RenderSelection render_selection = 1;
  required RenderTargetType type = 2;
  // options is a mask of:
  // STOP_AT_RENDER = 0x1,
  // CLEAR_BEFORE_RENDER = 0x2,
  required uint32 options = 3;
}

message RenderTargetResponse {
  required uint32 selection_count = 1;
  required uint32 experiment_count = 2;
  required string label = 4;
  required bytes image = 3;
}

message ShaderAssemblyRequest {
  required RenderSelection render_selection = 1;
  required uint32 experiment_count = 2;
}

message MetricsRequest {
  repeated uint64 metric_ids = 1;
  required uint32 experiment_count = 2;
}

message RenderSequence {
  required uint32 begin = 1;
  required uint32 end = 2;
}

message RenderSelection {
  required uint32 selection_count = 1;
  repeated RenderSequence render_series = 2;
}

message AllMetricsRequest {
  required RenderSelection selection = 1;
  required uint32 experiment_count = 2;
}

message ShaderAssembly {
  required string shader = 1;
  required string ir = 2;
  required string nir_ssa = 3;
  required string nir_final = 4;
  required string simd8 = 5;
  required string simd16 = 6;
  required string simd32 = 7;
  required string before_unification = 8;
  required string after_unification = 9;
  required string before_optimization = 10;
  required string const_coalescing = 11;
  required string gen_ir_lowering = 12;
  required string layout = 13;
  required string optimized = 14;
  required string push_analysis = 15;
  required string code_hoisting = 16;
  required string code_sinking = 17;
  required string simd = 18;
}

message ShaderAssemblyResponse {
  required uint32 render_id = 1;
  required uint32 selection_id = 2;
  required uint32 experiment_count = 9;
  required ShaderAssembly vertex = 3;
  required ShaderAssembly fragment = 4;
  required ShaderAssembly tess_control = 5;
  required ShaderAssembly tess_eval = 6;
  required ShaderAssembly geom = 7;
  required ShaderAssembly comp = 8;
  }

message MetricSeries {
  required uint64 metric_id = 1;
  repeated float data = 2;
}

message MetricsResponse {
  repeated MetricSeries metric_data = 1;
  required uint32 experiment_count = 2;
  required uint32 selection_count = 3;
}

message ReplaceShadersRequest {
  required uint32 render_id = 1;
  required uint32 experiment_count = 2;
  required string vs = 3;
  required string fs = 4;
  required string tess_control = 5;
  required string tess_eval = 6;
  required string geom = 7;
  required string comp = 8;
}

message ReplaceShadersResponse {
  required uint32 render_id = 1;
  required uint32 experiment_count = 2;
  required bool status = 3;
  required string message = 4;
}

message ApiRequest {
  required RenderSelection selection = 1;
}

message ApiResponse {
  required uint32 selection_count = 3;
  required uint32 render_id = 1;
  repeated string apis = 2;
}

message ErrorResponse {
  required uint32 severity = 1;
  required string message = 2;
}

message BatchRequest {
  required RenderSelection selection = 2;
  required uint32 experiment_count = 3;
}

message BatchResponse {
  required uint32 render_id = 1;
  required uint32 selection_count = 2;
  required uint32 experiment_count = 3;
  required string batch = 4;
}

message UniformRequest {
  required RenderSelection selection = 2;
  required uint32 experiment_count = 3;
}

enum UniformType {
  FLOAT_UNIFORM = 1;
  INT_UNIFORM = 2;
  UINT_UNIFORM = 3;
  BOOL_UNIFORM = 4;
};

enum UniformDimension {
  D_1x1 = 1;
  D_2x1 = 2;
  D_3x1 = 3;
  D_4x1 = 4;
  D_2x2 = 5;
  D_3x2 = 6;
  D_4x2 = 7;
  D_2x3 = 8;
  D_3x3 = 9;
  D_4x3 = 10;
  D_2x4 = 11;
  D_3x4 = 12;
  D_4x4 = 13;
};

message UniformResponse {
  required uint32 render_id = 1;
  required uint32 selection_count = 2;
  required uint32 experiment_count = 3;
  required string name = 4;
  required UniformType uniform_type = 5;
  required UniformDimension uniform_dimension = 6;
  required bytes data = 7; 
}

message SetUniformRequest {
  required RenderSelection selection = 1;
  required string name = 2;
  required uint32 index = 3;
  required string data = 4;
}

message DisableRequest {
  required RenderSelection selection = 1;
  required bool disable = 2;
}

message SimpleRequest {
  required RenderSelection selection = 1;
  required bool simple_shader = 2;
}

message ScissorRequest {
  required RenderSelection selection = 1;
  required bool scissor = 2;
}

message WireframeRequest {
  required RenderSelection selection = 1;
  required bool wireframe = 2;
}

message Texture2x2Request {
  required RenderSelection selection = 1;
  required bool texture_2x2 = 2;
}

message StateRequest {
  required RenderSelection selection = 1;
  required uint32 experiment_count = 2;
}

message StateKey {
  required string path = 2;
  required string name = 3;
}

message StateResponse {
  required uint32 selection_count = 1;
  required uint32 render_id = 2;
  required uint32 experiment_count = 3;
  required StateKey item = 4;
  repeated string value = 5;
}

message SetStateRequest {
  required RenderSelection selection = 1;
  required StateKey item = 2;
  required uint32 offset = 3;
  required string value = 4;
}

message TextureRequest {
  required RenderSelection selection = 1;
  required uint32 experiment_count = 2;
}

message TextureKey {
  required uint32 unit = 1;
  required uint32 target = 2;
  required uint32 offset = 3;
}

message TextureData {
  required uint32 level = 1;
  required string internal_format = 2;
  required uint32 width = 3;
  required uint32 height = 4;
  required string format = 5;
  required string type = 6;
  required bytes image_data = 7;
}

message TextureResponse {
  required uint32 selection_count = 1;
  required uint32 render_id = 2;
  required uint32 experiment_count = 3;
  required TextureKey binding = 4;
  repeated TextureData images = 5;
}

message RetraceRequest {
  required RequestType requestType = 1;
  optional RenderTargetRequest renderTarget = 2;
  optional ShaderAssemblyRequest shaderAssembly = 3;
  optional OpenFileRequest fileOpen = 4;
  optional MetricsRequest metrics = 5;
  optional AllMetricsRequest allMetrics = 6;
  optional ReplaceShadersRequest shaders = 7;
  optional ApiRequest api = 8;
  optional BatchRequest batch = 9;
  optional DisableRequest disable = 10;
  optional SimpleRequest simpleShader = 11;
  optional ScissorRequest scissor = 12;
  optional UniformRequest uniform = 13;
  optional SetUniformRequest set_uniform = 14;
  optional StateRequest state = 15;
  optional SetStateRequest set_state = 16;
  optional WireframeRequest wireframe = 17;
  optional Texture2x2Request texture_2x2 = 18;
  optional TextureRequest texture = 19;
}

message RetraceResponse {
  optional RenderTargetResponse renderTarget = 1;
  optional ShaderAssemblyResponse shaderAssembly = 2;
  optional OpenFileStatus fileStatus = 3;
  optional MetricsList metricsList = 4;
  optional MetricsResponse metricsData = 5;
  optional ReplaceShadersResponse shadersData = 6;
  optional ApiResponse api = 7;
  optional ErrorResponse error = 8;
  optional BatchResponse batch = 9;
  optional UniformResponse uniform = 10;
  optional StateResponse state = 11;
  optional TextureResponse texture = 12;
}
